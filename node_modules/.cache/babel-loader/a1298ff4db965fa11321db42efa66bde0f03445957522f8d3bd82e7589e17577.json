{"ast":null,"code":"var _jsxFileName = \"E:\\\\work\\\\pet-project\\\\it_Delta\\\\src\\\\components\\\\imagesList\\\\ImagesList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport style from \"./imagesList.module.css\";\nimport PhotoModal from \"../photoModal/PhotoModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ImagesList = ({\n  photos\n}) => {\n  _s();\n  const [fullPhotoData, setFullPhotoData] = useState([]);\n  const [isOpenPopup, setIsOpenPopup] = useState(false);\n  const openPopup = async e => {\n    setIsOpenPopup(true);\n    const id = e.currentTarget.id;\n    // запрос возвращает всегда пустой массив, соответственно нельзя и добавить комментарий\n    let response = await fetch(\"http://test-backend.itdelta.agency/api/image/:\" + id).then(data => data.json());\n    if (!response.length) {\n      response = {\n        photo: e.target.src,\n        id: id\n      };\n    }\n    setFullPhotoData(response);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.images_list,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: style.images_list__photos,\n          children: photos ? photos.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: style.images_list__item,\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                id: item.id,\n                onClick: openPopup,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: item.image,\n                  alt: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 23\n                }, this)\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 19\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\\"Loading...\\\"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), isOpenPopup && /*#__PURE__*/_jsxDEV(PhotoModal, {\n      fullPhotoData: fullPhotoData,\n      setIsOpenPopup: setIsOpenPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ImagesList, \"1HbU5IsEhZRHiO2ZuwIYWxdK1hc=\");\n_c = ImagesList;\nexport default ImagesList;\nvar _c;\n$RefreshReg$(_c, \"ImagesList\");","map":{"version":3,"names":["React","useState","style","PhotoModal","jsxDEV","_jsxDEV","Fragment","_Fragment","ImagesList","photos","_s","fullPhotoData","setFullPhotoData","isOpenPopup","setIsOpenPopup","openPopup","e","id","currentTarget","response","fetch","then","data","json","length","photo","target","src","children","className","images_list","images_list__photos","map","item","images_list__item","onClick","image","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/work/pet-project/it_Delta/src/components/imagesList/ImagesList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport style from \"./imagesList.module.css\";\r\nimport PhotoModal from \"../photoModal/PhotoModal\";\r\n\r\nconst ImagesList = ({ photos }) => {\r\n  const [fullPhotoData, setFullPhotoData] = useState([]);\r\n  const [isOpenPopup, setIsOpenPopup] = useState(false);\r\n\r\n  const openPopup = async (e) => {\r\n    setIsOpenPopup(true);\r\n    const id = e.currentTarget.id;\r\n    // запрос возвращает всегда пустой массив, соответственно нельзя и добавить комментарий\r\n    let response = await fetch(\r\n      \"http://test-backend.itdelta.agency/api/image/:\" + id\r\n    ).then((data) => data.json());\r\n\r\n    if (!response.length) {\r\n      response = { photo: e.target.src, id: id };\r\n    }\r\n    setFullPhotoData(response);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={style.images_list}>\r\n        <div>\r\n          <ul className={style.images_list__photos}>\r\n            {photos ? (\r\n              photos.map((item) => {\r\n                return (\r\n                  <li className={style.images_list__item}>\r\n                    <button id={item.id} onClick={openPopup} key={item.id}>\r\n                      <img src={item.image} alt={item.name} />\r\n                    </button>\r\n                    <span>{item.id}</span>\r\n                  </li>\r\n                );\r\n              })\r\n            ) : (\r\n              <div>\"Loading...\"</div>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      {isOpenPopup && (\r\n        <PhotoModal\r\n          fullPhotoData={fullPhotoData}\r\n          setIsOpenPopup={setIsOpenPopup}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImagesList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}